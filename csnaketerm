#!/usr/bin/env node
'use strict'

const fs = require('fs')
const readline = require('readline')
const util = require('util')
const timeout = util.promisify(setTimeout)

const VERSION = '0.1.0'
const USAGE = `Usage: csnaketerm [ -h | --help | -v | --version ]
The classic Snake game, right in your terminal
Invoke without options to play the game (best played on an 80x24 terminal)

Options:

  -h, --help       Print this help message
  -v, --version    Display the current version`
const INSTRUCTIONS = `A snake is trapped in a maze whose body is denoted by '@', is initially 3 units
long and moves 1 unit in one of the four cardinal directions per tick. Your
mission is to guide the snake's movement to ensure that it survives for as long
as possible. The snake's direction of movement can be controlled by the arrow
keys; however, it can only perform 90 degree turns so it cannot make a U-turn in
a single tick.

The snake may collide with the following obstacles leading to its death:

- Walls in the maze denoted by '#', or
- Its own body

Unless there is a wall, the snake will wrap around to the other end of the 80x24
terminal screen once it reaches one end of the screen.

While moving across the maze and avoiding obstacles, the player (i.e. you) gains
1 point per tick where the snake is still alive. But within the maze, the snake
may also consume food pellets denoted by '*' by colliding with them which gains
the player 10 extra points per pellet. A side effect is that each pellet
consumed increases the length of the snake by 1 unit, so it becomes increasingly
difficult to prevent the snake from colliding with itself (or the walls of the
maze) as more and more pellets are consumed.`
const INVALID_OPTION = '\nInvalid option specified - please choose one of the options listed above'
const [ CELL_EMPTY, CELL_WALL, CELL_SNAKE, CELL_FOOD ] = [ 0, 1, 2, 3 ]
const UNCONFINED = `................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................`
const WALLED = `################################################################################
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
################################################################################`
const LABYRINTH = `############################################################################  ##
#             #           #       #       #       #       #       #       #    #
#             #       #       #       #       #       #       #       #        #
##########    #   #########################################################    #
                                                                          #    .
                                                                          #    .
####  #  ##############    ################################################    #
#  #  #  #            #     #     #   #     #       #     #   #       #        #
#  #  #  #                  #           #   #   #   #             #   #        #
#  #  ####            #         #   #   #       #       #   #     #       #    #
#     #  ##########   ##########################################################
#  #              #         #  #  #  #  #  #  #  #  #  #  #        #     #     #
#  #  #  #  ####  #         #  #     #     #     #  #  #  #     #  #  #  #     #
#  #  ####  #  #  #         #  #  #  #  #  #  #  #  #  #     #  #  #  #  #     #
#  #        #  #  #         #     #  #  #        #  #        #  #  #  #  #     #
#  ##########  ####         #  #  #  #  #  #  #  #           #  #  #  #  #     #
#  #           #  #         #  #  #           #  #  #  #  #     #  #  #  #     #
#  #           #  #            #  #  #  #  #  #     #  #  #     #     #        #
#  ##########  #  ##########################################################  ##
#  #        #        #     #        #            #                #            #
#  ###   ####        #  #  #   #    #     #      #       #        #            #
#                    #  #  #   #    #     #      #       #        #            #
#                       #      #          #              #                     #
############################################################################  ##`

if (process.argv.length > 3) {
  console.log(USAGE)
  process.exit(1)
}

if (process.argv.length === 3) {
  switch (process.argv[2]) {
  case '-h':
  case '--help':
    console.log(USAGE)
    process.exit()
  case '-v':
  case '--version':
    console.log(VERSION)
    process.exit()
  default:
    console.log(USAGE)
    process.exit(1)
  }
}

readline.emitKeypressEvents(process.stdin)
if (process.stdin.isTTY)
  process.stdin.setRawMode(true)

async function mainMenu() {
  console.clear()
  console.log(`csnaketerm, v${VERSION}`)
  console.log('The classic Snake game, right in your terminal')
  console.log('Choose an action by pressing the corresponding key:\n')
  console.log('  S: Start')
  console.log('  I: Instructions')
  console.log('  Q: Quit')
  process.stdin.resume()
  process.stdin.once('keypress', async (str, key) => {
    process.stdin.pause()
    if (key && key.ctrl && key.name === 'c') {
      console.clear()
      process.exit()
    }
    switch (str) {
    case 's':
    case 'S':
      mazeSelectionMenu()
      break
    case 'i':
    case 'I':
      instructionMenu()
      break
    case 'q':
    case 'Q':
      console.clear()
      process.exit()
    default:
      console.log(INVALID_OPTION)
      await timeout(1000)
      mainMenu()
    }
  })
}

async function instructionMenu() {
  console.clear()
  console.log('Instructions')
  console.log('='.repeat(80))
  console.log(INSTRUCTIONS)

  console.log('\nPress any key to return to the main menu')
  process.stdin.resume()
  process.stdin.once('keypress', async (str, key) => {
    process.stdin.pause()
    if (key && key.ctrl && key.name === 'c') {
      console.clear()
      process.exit()
    }
    mainMenu()
  })
}

async function mazeSelectionMenu() {
  console.clear()
  console.log('Select a maze by pressing the corresponding key:\n')

  console.log('  U. Unconfined')
  console.log('  W. Walled')
  console.log('  L. Labyrinth')
  process.stdin.resume()
  process.stdin.once('keypress', async (str, key) => {
    process.stdin.pause()
    if (key && key.ctrl && key.name === 'c') {
      console.clear()
      process.exit()
    }
    switch (str) {
    case 'u':
    case 'U':
      difficultySelectionMenu('Unconfined')
      break
    case 'w':
    case 'W':
      difficultySelectionMenu('Walled')
      break
    case 'l':
    case 'L':
      difficultySelectionMenu('Labyrinth')
      break
    default:
      console.log(INVALID_OPTION)
      await timeout(1000)
      mazeSelectionMenu()
    }
  })
}

async function difficultySelectionMenu(maze) {
  console.clear()
  console.log('Select a difficulty by pressing the corresponding key:\n')

  console.log('  E. Easy')
  console.log('  M. Medium')
  console.log('  H. Hard')
  console.log('  I. Insane')
  process.stdin.resume()
  process.stdin.once('keypress', async (str, key) => {
    process.stdin.pause()
    if (key && key.ctrl && key.name === 'c') {
      console.clear()
      process.exit()
    }
    switch (str) {
    case 'e':
    case 'E':
      startGame(maze, 'Easy')
      break
    case 'm':
    case 'M':
      startGame(maze, 'Medium')
      break
    case 'h':
    case 'H':
      startGame(maze, 'Hard')
      break
    case 'i':
    case 'I':
      startGame(maze, 'Insane')
      break
    default:
      console.log(INVALID_OPTION)
      await timeout(1000)
      difficultySelectionMenu(maze)
    }
  })
}

function parseMaze(maze) {
  if (typeof maze !== 'string')
    throw new TypeError('parseMaze(maze): Expected \'maze\' to be a string')
  let result = maze.split`\n`
    .map(row => row.split``
      .map(cell => cell === '*' ?
          CELL_FOOD :
        cell === '#' ?
          CELL_WALL :
          CELL_EMPTY))
  if (result.length !== 24)
    throw new Error('parseMaze(maze): Expected \'maze\' to have exactly 24 rows')
  for (let row of result)
    if (row.length !== 80)
      throw new Error('parseMaze(maze): Expected \'maze\' to have exactly 80 columns')
  return result
}

async function startGame(maze, difficulty) {
  // TODO: replace stub with proper implementation
  console.clear()
  switch (maze) {
  case 'Unconfined':
    parseMaze(UNCONFINED)
    break
  case 'Walled':
    parseMaze(WALLED)
    break
  case 'Labyrinth':
    parseMaze(LABYRINTH)
    break
  default:
    console.error('Unreachable statement reached!')
    console.error('Please report this bug at https://github.com/DonaldKellett/csnaketerm/issues')
    process.exit(1)
  }
  console.log('This game is a work in progress and is therefore not yet available. We apologize')
  console.log('for any inconvenience caused.')
  console.log('\nPress any key to return to the main menu')
  process.stdin.resume()
  process.stdin.once('keypress', async (str, key) => {
    process.stdin.pause()
    if (key && key.ctrl && key.name === 'c') {
      console.clear()
      process.exit()
    }
    mainMenu()
  })
}

mainMenu()
